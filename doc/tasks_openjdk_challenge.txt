- Refactor FontManager into abstract class with concrete
  (platform-specific) subclasses. Right now, the FontManager class is
  a completely static class. Refactoring into an abstract class,
  turning all public methods into abstract instance methods and moving
  stuff into platform specific subclasses shouldn't be hard.

- Implement font reading via InputStreams or (better yet) channels. At
  the moment, the File.create() methods pass a filename string to the
  FontManager, which opens a file, makes a channel of it and reads
  from that. However, for Font.create(InputStream) this means copying
  the stream into a temporary file, and passing in that file. It would
  be much more efficient to create the channel in the Font class, and
  pass this channel into FontManager for reading. This avoids the
  copy, and more importantly, it allows fonts to be built into
  applications (JARs or binaries). However, this proves to be
  difficult, because the font stuff relies on FileChannel, some of
  which's operations cannot be mapped on InputStream easily
  (i.e. position() ). FreeType can't read from streams like they work
  in java, FreeType needs buffer-like access (i.e. with offset and
  length).

- Move font stuff out of SunGraphicsEqnvironment. This helps
  separating font stuff from the rest of AWT/Java2D, and ultimately
  enables external GraphicsEnvironments to be used. Seems like this
  stuff could be moved into FontManager, or one of its platform
  specific subclasses, when the above refactoring has been done.

- Write howto for internal interface.  Collect API documentation for
- internal interface.

