fontmanager.patch
=================

The FontManager class has been a final class with lots of static methods in it, mixing Solaris, Windows and generics code. The first step of refactoring was to make the FontManager an abstract class, with most static methods now instance methods, and moving some platform specific things to a subclass (DefaultFontManager only for now).

j2d-localdisplay.patch
======================

In SwingUtilities2.isLocalDisplay(), there have been some platform checks to determine if a display is local or not. Worse: In the Linux/Solaris case it uses reflection to directly access X11GraphicsEnvironment. This doesn't work for graphics backends on Linux that don't use the X11GraphicsEnvironment. We've introduced a new method isDisplayLocal() in SunGraphicsEnvironment, which can be implemented by the backend. When a backend doesn't use SGE, it is assumed that the display is local.

j2d-fontmanager2.patch
======================

More FontManager related refactoring. Another bunch of static methods and fields have been changed to instance methods and fields, and access to them now goes over the factory method.

fontmanager3.patch
==================

All font related methods from SunGraphicsEnvironment and platform specific subclasses have been moved to FontManager and platform specific subclasses.


fontmanager4.patch
==================

Some remaining things (fields, inner classes) from SGE have been moved to FontManager too.

RepaintManager.patch
====================

In RepaintManager we found some direct casts to SunToolkit, which doesn't work if the implementing TK is not a STK. We added instanceof checks, assuming appropriate default behaviour if the TK isn't a STK.

cleanawtpeer.patch
==================

Some old duplicate methods in the interfaces have been removed and replaced by their newer counterparts.

documentawtpeer.patch
=====================

Documents all the interfaces in java.awt.peer.*

fontmanager5.patch & fontmanager6.patch
=======================================

Moved FM instantiation into its own factory. Make FontManager an interface. Some more static methods have been converted to instance methods. Implementation has been split out into FontManagerBase and FontConfigManager.

openjdk-splashscreen.patch
==========================

In java.awt.Window, the splashscreen has been closed by using the static method SunToolkit.closeSplashScreen(). Not only is this bad for portability (how can a TK implement this??), it's also a duplicated piece of code, because all
the necessary functionalitly is already in SplashScreen.close(). We have made Window use the official API and be happy.


