Project Caciocavallo - Portable GUI backends for OpenJDK
-----------------------------------------------------------

Introduction
------------

Caciocavallo - Portable GUI backends is one of the finalists of the
OpenJDK Innovators Challenge. As of March 17, 2008 (well, more or
less), Caciocavallo was selected as a finalist to the OpenJDK
challenge, so we even have a cool new website with nothing in it :)

http://openjdk.java.net/projects/caciocavallo/

Here is the mail with the original proposal:

http://mail.openjdk.java.net/pipermail/challenge-discuss/2008-March/000082.html

The project classified Bronze at the Challenge, giving us great honours and
proud :)

http://www.reuters.com/article/pressRelease/idUS134139+29-Sep-2008+BW20080929

You can find the interview with the original developes on this link:

http://mediacast.sun.com/users/robilad/media/daliboropenJDKwinners.ogg

The interview was conducted by a nice guy who's name is known by everyone in
the Free Java community, Dalibor Topic (robilad on IRC). Visit this link
for some other cool interviews:

http://robilad.livejournal.com/37607.html

A short presentation about Cacio was shoot at FOSDEM 2009 by Andrew John Hughes.
You can find it here:

http://www.jroller.com/neugens/entry/cacio_presentation_at_fosdem_2009

Good resource of information are the authors' blogs:

* http://kennke.org/blog/
* http://www.jroller.com/neugens
* http://weblogs.java.net/blog/thetan/

Checkout the code
-----------------

Ok, if you are reading this README chances are that you already got the sources
so you can skip this section.

In case you found this README somewhere else, the best way to get access
to the sources is to clone the main repository:

http://hg.openjdk.java.net/caciocavallo/ng/

Cacio used to have two repositories, so called internal (also called NG) and
external, as well as a number of patches we needed in order to make the project
work with OpenJDK; luckily these patches are all in the main OpenJDK
source tree now. All the repositories are not mantained anymore and are there
only for historical reasons (and because of the Challenge requirement,
of course).

Caciocavallo is no different than any other project in the OpenJDK forest, and
used Mercurial to manage it's sources. To get a fresh tree of sources just do:

$ hg clone http://hg.openjdk.java.net/caciocavallo/ng/ caciocavallo

If you don't specify the target directory it will create a default one called
ng, which is not really nice.

That's all for now, time to move on to...

Build
-----

To build project Caciocavallo you need first a recent build of OpenJDK
or IcedTea. Caciocavallo requires the use of Sun internal classes, so
chances are that it will not even compile. But as we don't expect many
changes in the AWT and Java2D code we rely on, you should be able to just
build and run Cacio without pain.

You can clone the latest code from the OpenJDK website. As of this writing,
one patch is still required. This is being discussed here:

https://bugs.openjdk.java.net/show_bug.cgi?id=100052

This patch is needed in order to run the native library code for the
Caciocavallo backends.

For Caciocavallo, the ant build included should work on Eclipse or
NetBeans and on the command line as well.

There is a build.properties file that needs tweaking with some paths, but this
file is tracked by Mercurial, so changing it will call for endless merge or
merge conflicts. As an alternative, you can create and edit user.properties in
the root directory of the project. This is handy because it's not tracked by
Mercurial.

Some of the interesting options are:

openjdk=/path/to/openjdk/build/
openjdk.src=/path/to/openjdk/sources
openjdk.build.generated.headers=/path/to/openjdk/generated/includes/

My file looks like:

openjdk=/home/neugens/work_space/netbeans/openjdk/build/linux-i586-debug
openjdk.src=/home/neugens/work_space/netbeans/openjdk
openjdk.build.generated.headers=/home/neugens/work_space/netbeans/openjdk/build/linux-i586-debug/tmp/

Just adjust with the correct paths on your configuration.

If you are not running under Linux, or you distribution uses some non
conventional paths (or for whatever other reason), you may need to change
this definition too:

sdl.include=/usr/include/SDL

This is needed only if you want to compile the libSDL backend.

To compile the native code, you need to provide ant with access to cpptasks:

http://ant-contrib.sourceforge.net/cpptasks/index.html

Something like:

CLASSPATH=/home/neugens/work_space/tools/cpptasks.jar ant compile

should do the trick.


Caciocavallo-Web
----




Test
----

[TODO]

It's pretty much everything for now, but stay tuned for other cool
stuff :)

