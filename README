Project Caciocavallo - Portable GUI backends for OpenJDK
-----------------------------------------------------------

Introduction
------------

Caciocavallo - Portable GUI backends is one of the finalists of the
OpenJDK Innovators Challenge. As of March 17, 2008 (well, more or
less), Caciocavallo was selected as a finalist to the OpenJDK
challenge, so we have a cool new website with nothing in it :)

http://openjdk.java.net/projects/caciocavallo/

Here is the mail with the original proposal:

http://mail.openjdk.java.net/pipermail/challenge-discuss/2008-March/000082.html

Build
-----

To build project Caciocavallo you need first a recent build of OpenJDK
or IcedTea. Caciocavallo requires the use of Sun internal classes, so
chances are that it will not even compile. The latest version known to
work is TIP b7474b739d13. You can clone this tip from the OpenJDK
website and then apply the needed patches. The patches are not
included in this source, so you need to get them by cloning this repository:

http://hg.openjdk.java.net/caciocavallo/caciocavallo/

We maintain a branch of the OpenJDK mercurial forest with patches already
applied here:

http://kennke.org/~hg/openjdk-tip-b7474b739d13-caciocavallo-branch/

For Caciocavallo, the ant build included should work on Eclipse or
NetBeans as well, and is provided for your hacking pleasure. We
maintain it, though we really think that real hackers use butterflies
(http://xkcd.com/378/)...  Nevertheless, if you don't want to wait for
a butterfly to come (and if you are in Germany, you could wait a very
long time...) the ant script should just work.

So long... to compile you can just type "ant jar" on the command line.

There is a build.properties file that needs tweaking with the same
path, where you need to pass a couple of options. As an alternative,
you can create and edit user.properties in the root directory of the
project. This is handy because it's not tracked by mercurial, so you
don't need to continually merge it if you frequently try to sync with our
tree.

This is what is needed by ant:

escher=../escher/dist/escher-0.3.jar
openjdk=../openjdk/build/linux-i586-debug/

Just adjust with the correct paths on your configuration.

Escher is used to connect to the XServer.  We are trying hard to make
Escher and Caciocavallo in sync, so that you can simply grab the
latest sources from here:

http://escher.sourceforge.net/hg/escher-trunk (just clone)

For the sake of the project, we maintain a branch of escher too:

http://kennke.org/~hg/escher-trunk/

Again, tweak the build.properties to point to the correct position of
the jar files.

Test
----

This is an small script that can be used to test the project:

--- cut ---
#!/bin/sh
# testescher.sh
OPENJDK_DIR=/path/to/your/openjdk/build/linux-i586/j2sdk-image/
BOOTCLASSPATH=/path/to/escher.jar:/path/to/caciocavallo/dist/echer-peer.jar
TOOLKIT=gnu.java.awt.peer.x.XToolkit
GRAPHICSENV=gnu.java.awt.peer.x.XGraphicsEnvironment
FONT_MANAGER=gnu.java.awt.peer.x.EscherFontManager

# change to suit your needs, we like to use the classpath code
CLASSPATH=/opt/classpath/examples/examples.zip
MAIN=gnu.classpath.examples.swing.Demo

$OPENJDK_DIR/bin/java -Xbootclasspath/a:$BOOTCLASSPATH -Dswing.metalTheme=steel -Dawt.toolkit=$TOOLKIT -Djava.awt.graphicsenv=$GRAPHICSENV -Dsun.font.fontmanager=$FONT_MANAGER -cp $CLASSPATH $MAIN
--- cut ---

if you have your X server setted up to prevent TCP connections (a sane
thing!) you will get a Connection Refused Exception, at least until we
finish to port the Unix Domain Socket implementation from Classpath,
so you may need Xephyr or some other nested XServer.

You may also need issue an xhost + 127.0.0.1 to address a random bug
in escher.

It's pretty much everything for now, but stay tuned for other cool
stuff :)

